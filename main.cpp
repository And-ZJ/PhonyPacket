#include <stdio.h>
#include <stdlib.h>

extern "C" {
#include "BytesTools.h"
#include "NetworkTools.h"
}
#include "SendPacket.h"

#define __TEST__

#ifdef __TEST__
#include "Test.h"
#endif // __TEST__

void run_tcp_example()
{
    const char *captureHexStream = "00cfe04a9bfd2c4d54eddd0a080045000430ecc74000800674a1c0100ab5c0100a8900871b32008c53908490074a501810044a84000005000203100000000804000006000000f003000000000000010000000000000000000200d8030000d80300004d454f5704000000a301000000000000c0000000000000463903000000000000c00000000000004600000000b0030000a00300000000000001100800cccccccc6000000000000000a00300007000000000000000020000000200000000000000000000000000000000000000000002000400020000000000020000003903000000000000c000000000000046b601000000000000c00000000000004602000000200100001002000001100800cccccccc10010000000000000100000000000200040002000800020001000000506d48132148d211a4943cb306c100000100000000000000010000000c000200d4000000d40000004d454f5701000000506d48132148d211a4943cb306c100000000000005000000b48039857c064b475330d7f5b845bb30021c0000ec343045b0ff754d44ad168d4800320007004400450053004b0054004f0050002d004d0039005000320048004d004400000007003100390032002e00310036002e00310030002e00310038003100000007003100360039002e003200350034002e003100300039002e00310038003200000000000900ffff00001e00ffff00001000ffff00000a00ffff00001600ffff00001f00ffff00000e00ffff0000000001100800cccccccc00020000000000000000000000000200b48039857c064b470400020000980000ec343045569ee56ae5e4ca3a0100000005000700e4000000e400470007004400450053004b0054004f0050002d004d0039005000320048004d0044005b00350034003800370030005d00000007003100390032002e00310036002e00310030002e003100380031005b00350034003800370030005d00000007003100360039002e003200350034002e003100300039002e003100380032005b00350034003800370030005d00000000000a00ffff4400450053004b0054004f0050002d004d0039005000320048004d0044005c00570069006e00690067006800740000001e00ffff4400450053004b0054004f0050002d004d0039005000320048004d0044005c00570069006e00690067006800740000001000ffff4400450053004b0054004f0050002d004d0039005000320048004d0044005c00570069006e00690067006800740000000900ffff4400450053004b0054004f0050002d004d0039005000320048004d0044005c00570069006e00690067006800740000001600ffff4400450053004b0054004f0050002d004d0039005000320048004d0044005c00570069006e00690067006800740000001f00ffff4400450053004b0054004f0050002d004d0039005000320048004d0044005c00570069006e006900670068007400000000000000000000000000";
    PacketInfo *packetExample = readableHexStreamToPacketInfo(captureHexStream);


    // 手动修改 mac 和 ip 地址，如果需要的话
//    copyBytes(packetExample->ethernetHead.ether_shost,"\x00\x0c\x29\xcc\x88\xa0",6);
//    copyBytes(packetExample->ethernetHead.ether_dhost,"\x00\x10\xf3\x5f\xf3\x79",6);
//    packetExample->ipHead.saddr = ipNumToIpUInt(192,16,10,205);
//    packetExample->ipHead.daddr = ipNumToIpUInt(192,16,10,202);
    displayPacketInfo(packetExample);

    int sendSize = sendPacket("ens33",packetExample);
    printf("Send size : %d\n",sendSize);
    delete packetExample;
}

void run_udp_example()
{
    const char *captureHexStream = "94de802ff2dd182001954600080045000223ee9c000040110000c0100a47b6fe21960fac1f40020fa50c02380300b94ffa3e89b35502000000012e0100006935f0bd90ff58bb8c6ac28a41e0b8efb4a09f4b5715e5a7e34daa46c7f8fabc050c7ec81cbea23fbe20501d42f9e4e5c739645af637f829ccfca1af8e940b8a1e9e1270fc250183fb275e813f5de26eb24f514749ed8cdb4ef95ea208ffca12fb3b9f0d774207128a7c4e3b9ac500e4cedc16c7e70be82e970a65cf816f87b7f3555e72c881bed2c55ed9c5015c2472ba19e68b33d94d9661d9df3322cc97a03d36b34c658a93850669fe95abec80c45e515a373f7017a22233e077e24b2eabda5d28eb35fc5d1b7f9c00a85e232deca9acb3d304f934d652750267b2fcd2bcfdb8d9f0c2e85d9d4f14035b2f190e2be015c851b9649dc7de8e86440835696876fbc676232f23c81f7e70396165b8aedbbeed83d2d99c48b69fb33d9bf43b4f9a988cd840fa172fa6a1843a6d8f282cc24380b164c988c98a28a9b367605b7c7f8e6795304b81e09ee7543c264ae405cb33e3f1b56a3b9c6a0d19ea8324a21f68dd3a5a896f838dd688e2753e1bba846d2c0107e859ddf545a3573b08b3cc95c78f27553cf79d2517c8c7c4e8ef559144bf7d4ad236e8efad5fd9872aa306d01b6145d8dd53a536290c5c5ac09e126f4a974c6195e2040591401fd0580fe13739b9885cd9366ab82182e924a17531abcaf168807bfe74bd025b5a6f209c074d2480028a13151b72d745cf289bfc625c4c3103";
    PacketInfo *packetExample = readableHexStreamToPacketInfo(captureHexStream);

//    copyBytes(packetExample->ethernetHead.ether_shost,"\x00\x0c\x29\xcc\x88\xa0",6);
//    copyBytes(packetExample->ethernetHead.ether_dhost,"\x00\x10\xf3\x5f\xf3\x79",6);
//    packetExample->ipHead.saddr = ipNumToIpUInt(192,16,10,205);
//    packetExample->ipHead.daddr = ipNumToIpUInt(192,16,10,202);
    displayPacketInfo(packetExample);

    int sendSize = sendPacket("ens33",packetExample);
    printf("Send size : %d\n",sendSize);
    delete packetExample;
}

/**
* 在 Windows 下，调用 sendPacket 只会打印数据包结构，不会发送。
*   使用 codeblocks 编译时，需去除“project”->“Build options”->“Linker settings”->“other linker options” 中的 “-lnet” 参数。
* 在 Linux 下，调用 sendPacket 是发送但不打印消息。
*   安装库：apt-get install libnet-dev
*   使用 codeblocks 编译时，需加上“project”->“Build options”->“Linker settings”->“other linker options” 中的 “-lnet” 参数。
*/

int main()
{
#ifdef __TEST__
    test_all();
//    run_tcp_example();
#endif // __TEST__

    // 对此数据包进行复制，复制成 PacketInfo 对象后，可手动修改其中的数据，然后发送出去
    const char *captureHexStream = "00e2690d8e4a502b73d953a10800450001249527000080111088c0a88937c0a88991ff4e56ce0110c94b0f0e0d0c0b03003c571466372db5dd8bc808287038cecd38527742be8f4148d8e53c19a4b4c2c318c8fad13143de29e3f06fe6781d22c8f942c59cbfbb341f3d8657fd6d1eafb3d12076ac300df99d86fa4857803b38309d040926e849a8cf07b9488681509b03ffcbfcb8d3a206ed9fec43c22c3ac1d9a14227a4fb5a235ff6fd9cdce643ef6911b82520f48cb0d7174fd72b028ad6ef5b366b81ed02b02f965ed60fa9b3bc13c280eb43c085484863a8e666a697182cc477cde05221b9c8d04a0faf023589f3edc22d867be10c6b3767e3e4c8620f3655e68e4dfc3c297f47b2cb1bb3676162a221afdcc52790c38d0789f7fc893e448bc673b88b14ad5000a9442a726376ab18";
    PacketInfo *packet = readableHexStreamToPacketInfo(captureHexStream);

    // 手动修改 mac 和 ip 地址，如果需要的话
    copyBytes(packet->ethernetHead.ether_shost,"\x00\x0c\x29\xcc\x88\xa0",6);
    copyBytes(packet->ethernetHead.ether_dhost,"\x00\x10\xf3\x5f\xf3\x79",6);
    packet->ipHead.saddr = ipNumToIpUInt(192,16,10,205);
    packet->ipHead.daddr = ipNumToIpUInt(192,16,10,202);

    // 修改数据示例，手动把数据包最后一个字节改成0x05
    packet->appData.payload[packet->appData.payload_s-1] = 0x05;

    displayPacketInfo(packet);
    int sendSize = sendPacket("ens33",packet);
    printf("Send size : %d\n",sendSize);
    delete packet;
    return 0;
}
